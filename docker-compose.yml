# Bitrix CDN Server - Production Configuration
# Author: Chibilyaev Alexandr <info@aachibilyaev.com>
# Company: AAChibilyaev LTD

services:
  # NGINX с модулем для обработки изображений
  nginx:
    image: nginx:1.27-alpine
    container_name: cdn-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/run
      - /var/cache/nginx
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      # Конфигурация NGINX
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro

      # SSL сертификаты
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./docker/certbot/www:/var/www/certbot:ro
      - ./docker/certbot/conf:/etc/letsencrypt:ro

      # Bitrix files from host mount
      - /mnt/bitrix-cdn:/mnt/bitrix:ro

      # resize_cache - хранится локально на CDN (NFS для Bitrix)
      - /var/www/cdn/upload/resize_cache:/var/www/cdn/upload/resize_cache

      # Кеш WebP файлов
      - webp-cache:/var/cache/webp

      # Логи
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - webp-converter
      - sshfs
    networks:
      - cdn-network
    environment:
      - NGINX_HOST=${CDN_DOMAIN}
      - NGINX_PORT=80

  # Сервис конвертации изображений в WebP
  webp-converter:
    build:
      context: ./docker/webp-converter
      dockerfile: Dockerfile
    container_name: cdn-webp-converter
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      # Bitrix files from host mount
      - /mnt/bitrix-cdn:/mnt/bitrix:ro

      # resize_cache directory (shared via NFS to Bitrix)
      - /var/www/cdn/upload/resize_cache:/var/www/cdn/upload/resize_cache

      # Кеш WebP
      - webp-cache:/var/cache/webp

      # Логи
      - ./logs/converter:/var/log/converter
    environment:
      - WEBP_QUALITY=${WEBP_QUALITY:-85}
      - MAX_WIDTH=${WEBP_MAX_WIDTH:-2048}
      - MAX_HEIGHT=${WEBP_MAX_HEIGHT:-2048}
      - CACHE_DIR=/var/cache/webp
      - SOURCE_DIR=/mnt/bitrix
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - cdn-network
    # Ограничение ресурсов для конвертера
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # SSHFS монтирование файлов с сервера Битрикс
  sshfs:
    build:
      context: ./docker/sshfs
      dockerfile: Dockerfile
    container_name: cdn-sshfs
    restart: unless-stopped
    privileged: true
    cap_add:
      - SYS_ADMIN
    devices:
      - /dev/fuse
    volumes:
      # SSH ключи
      - ./docker/ssh:/root/.ssh

      # Точка монтирования (shared volume)
      - bitrix-mount:/mnt/bitrix

      # Логи
      - ./logs/sshfs:/var/log/sshfs
    environment:
      - REMOTE_HOST=${BITRIX_SERVER_IP}
      - REMOTE_USER=${BITRIX_SERVER_USER}
      - REMOTE_PATH=${BITRIX_UPLOAD_PATH}
      - MOUNT_POINT=/mnt/bitrix
      - SSH_KEY=/root/.ssh/bitrix_mount
    networks:
      - cdn-network
    healthcheck:
      test: ["CMD", "mountpoint", "-q", "/mnt/bitrix"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кеширования метаданных
  redis:
    image: redis:7.4-alpine
    container_name: cdn-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - cdn-network
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Varnish для дополнительного кеширования (опционально)
  varnish:
    image: varnish:7.5-alpine
    container_name: cdn-varnish
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./docker/varnish/default.vcl:/etc/varnish/default.vcl:ro
    environment:
      - VARNISH_SIZE=1G
    depends_on:
      - nginx
    networks:
      - cdn-network
    entrypoint: []
    command: ["varnishd", "-F", "-f", "/etc/varnish/default.vcl", "-a", ":80", "-s", "malloc,1G", "-p", "default_ttl=3600", "-p", "default_grace=3600"]

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:v2.53.2
    container_name: cdn-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - cdn-network

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:11.2.2
    container_name: cdn-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    depends_on:
      - prometheus
    networks:
      - cdn-network

  # NGINX Exporter для метрик
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:1.3.0
    container_name: cdn-nginx-exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9113:9113"
    command:
      - -nginx.scrape-uri=http://nginx/nginx_status
    depends_on:
      - nginx
    networks:
      - cdn-network

  # Certbot для SSL сертификатов
  certbot:
    image: certbot/certbot:v2.11.0
    container_name: cdn-certbot
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - cdn-network

  # Healthcheck сервис (закомментирован до создания Dockerfile)
  # healthcheck:
  #   build:
  #     context: ./docker/healthcheck
  #     dockerfile: Dockerfile
  #   container_name: cdn-healthcheck
  #   restart: unless-stopped
  #   volumes:
  #     - ./logs:/var/log/cdn:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   environment:
  #     - ALERT_EMAIL=${ADMIN_EMAIL}
  #     - CHECK_INTERVAL=300
  #   networks:
  #     - cdn-network
  #   depends_on:
  #     - nginx
  #     - webp-converter
  #     - sshfs
  
  # Redis Exporter для мониторинга Redis
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: cdn-redis-exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - cdn-network
    depends_on:
      - redis
  
  # Node Exporter для системных метрик
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: cdn-node-exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9100:9100"
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)'
    volumes:
      - /:/host:ro,rslave
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    networks:
      - cdn-network
    pid: host

volumes:
  # Bitrix files mounted via SSHFS
  bitrix-mount:
    driver: local

  # resize_cache - хранится локально, монтируется на Битрикс сервер
  resize-cache:
    driver: local
  
  # Кеш WebP файлов
  webp-cache:
    driver: local
  
  # Redis данные
  redis-data:
    driver: local
  
  # Prometheus данные
  prometheus-data:
    driver: local
  
  # Grafana данные
  grafana-data:
    driver: local

networks:
  cdn-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24
