#!/usr/bin/env python3
"""
–°–ª—É–∂–±–∞ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
"""

import asyncio
import logging
from typing import Set, Dict, Any, List
from prometheus_client import PrometheusClient
from docker_client import DockerClient
from alerts import AlertsClient
from models import AppConfig

logger = logging.getLogger(__name__)

class NotificationService:
    """–°–ª—É–∂–±–∞ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, bot, config: AppConfig):
        self.bot = bot
        self.config = config
        self.prometheus = PrometheusClient(config)
        self.docker = DockerClient(config)
        self.alerts = AlertsClient(config)

        # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.subscribers: Set[int] = set()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notifications_config = config.notifications
        self.enabled = self.notifications_config.enabled
        self.check_interval = self.notifications_config.check_interval
        self.critical_only = self.notifications_config.critical_only
        
        logger.info(f"Notification service initialized: enabled={self.enabled}, interval={self.check_interval}s")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.enabled:
            logger.info("Notification service disabled")
            return
        
        logger.info("Starting notification service...")
        
        while True:
            try:
                await self._check_and_notify()
            except Exception as e:
                logger.error(f"Error in notification service: {e}")
            
            await asyncio.sleep(self.check_interval)
    
    async def _check_and_notify(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.subscribers:
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ AlertManager
            active_alerts = await self.alerts.get_active_alerts()
            if active_alerts:
                await self._send_alerts(active_alerts)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
            critical_issues = await self._check_critical_issues()
            if critical_issues:
                await self._send_critical_issues(critical_issues)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ (–µ—Å–ª–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ)
            if not self.critical_only:
                metric_issues = await self._check_metric_issues()
                if metric_issues:
                    await self._send_metric_issues(metric_issues)
        
        except Exception as e:
            logger.error(f"Error checking notifications: {e}")
    
    async def _check_critical_issues(self) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º"""
        issues = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            containers = await self.docker.get_containers_status()
            
            for container in containers:
                if container['status'] != 'running':
                    issues.append({
                        'type': 'container_down',
                        'severity': 'critical',
                        'service': container['name'],
                        'message': f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container['name']} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {container['status']}"
                    })
                elif container.get('health') and container['health'] not in ['healthy', 'starting']:
                    issues.append({
                        'type': 'container_unhealthy',
                        'severity': 'warning',
                        'service': container['name'],
                        'message': f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container['name']} –Ω–µ–∑–¥–æ—Ä–æ–≤: {container['health']}"
                    })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health checks
            health_checks = await self.docker.get_health_checks()
            
            for service, status in health_checks.items():
                if not status['healthy']:
                    severity = 'critical' if service in ['nginx', 'redis'] else 'warning'
                    issues.append({
                        'type': 'health_check_failed',
                        'severity': severity,
                        'service': service,
                        'message': f"Health check {service} –Ω–µ –ø—Ä–æ—à–µ–ª: {status['status']}"
                    })
        
        except Exception as e:
            logger.error(f"Error checking critical issues: {e}")
            issues.append({
                'type': 'monitoring_error',
                'severity': 'warning',
                'service': 'notification_service',
                'message': f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}"
            })
        
        return issues
    
    async def _check_metric_issues(self) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        issues = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = await self.prometheus.get_all_metrics()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –ø–∞–º—è—Ç—å
            if metrics.get('redis', {}).get('memory_used'):
                memory_str = metrics['redis']['memory_used']
                if 'GB' in memory_str:
                    memory_gb = float(memory_str.replace(' GB', ''))
                    if memory_gb > 1.5:  # –ë–æ–ª—å—à–µ 1.5GB
                        issues.append({
                            'type': 'high_memory_usage',
                            'severity': 'warning',
                            'service': 'redis',
                            'message': f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ Redis: {memory_str}"
                        })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Nginx –∑–∞–ø—Ä–æ—Å—ã
            if metrics.get('nginx', {}).get('requests_per_min'):
                requests = metrics['nginx']['requests_per_min']
                if isinstance(requests, (int, float)) and requests > 1000:
                    issues.append({
                        'type': 'high_request_rate',
                        'severity': 'info',
                        'service': 'nginx',
                        'message': f"–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Nginx: {requests} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω"
                    })
        
        except Exception as e:
            logger.error(f"Error checking metric issues: {e}")
        
        return issues
    
    async def _send_alerts(self, alerts: List[Dict[str, Any]]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        for alert in alerts:
            message = self._format_alert(alert)
            await self._send_to_subscribers(message)
    
    async def _send_critical_issues(self, issues: List[Dict[str, Any]]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º"""
        for issue in issues:
            if issue['severity'] == 'critical':
                message = self._format_critical_issue(issue)
                await self._send_to_subscribers(message)
    
    async def _send_metric_issues(self, issues: List[Dict[str, Any]]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        for issue in issues:
            message = self._format_metric_issue(issue)
            await self._send_to_subscribers(message)
    
    async def _send_to_subscribers(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        for chat_id in self.subscribers:
            try:
                await self.bot.send_message(chat_id=chat_id, text=message)
            except Exception as e:
                logger.error(f"Error sending message to {chat_id}: {e}")
    
    def _format_alert(self, alert: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        severity_emoji = "üî¥" if alert.get('severity') == 'critical' else "üü°"
        
        message = f"{severity_emoji} *ALERT*\n\n"
        message += f"*–°–µ—Ä–≤–∏—Å:* {alert.get('name', 'Unknown')}\n"
        message += f"*–°—Ç–∞—Ç—É—Å:* {alert.get('status', 'Unknown')}\n"
        message += f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {alert.get('description', 'No description')}\n"
        
        if alert.get('severity'):
            message += f"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {alert['severity']}\n"
        
        return message
    
    def _format_critical_issue(self, issue: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã"""
        message = "üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê*\n\n"
        message += f"*–¢–∏–ø:* {issue.get('type', 'Unknown')}\n"
        message += f"*–°–µ—Ä–≤–∏—Å:* {issue.get('service', 'Unknown')}\n"
        message += f"*–°–æ–æ–±—â–µ–Ω–∏–µ:* {issue.get('message', 'No message')}\n"
        message += f"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {issue.get('severity', 'Unknown')}\n"
        
        return message
    
    def _format_metric_issue(self, issue: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        severity_emoji = "üü°" if issue.get('severity') == 'warning' else "‚ÑπÔ∏è"
        
        message = f"{severity_emoji} *–ú–ï–¢–†–ò–ö–ê*\n\n"
        message += f"*–¢–∏–ø:* {issue.get('type', 'Unknown')}\n"
        message += f"*–°–µ—Ä–≤–∏—Å:* {issue.get('service', 'Unknown')}\n"
        message += f"*–°–æ–æ–±—â–µ–Ω–∏–µ:* {issue.get('message', 'No message')}\n"
        
        return message
    
    def subscribe(self, chat_id: int):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.subscribers.add(chat_id)
        logger.info(f"User {chat_id} subscribed to notifications")
    
    def unsubscribe(self, chat_id: int):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.subscribers.discard(chat_id)
        logger.info(f"User {chat_id} unsubscribed from notifications")
    
    def is_subscribed(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        return chat_id in self.subscribers
    
    def get_subscribers_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        return len(self.subscribers)
