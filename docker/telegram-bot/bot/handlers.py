#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
"""

import asyncio
import logging
from typing import Optional, List, Dict, Any
from telegram import Update
from telegram.ext import ContextTypes
from utils import escape_markdown, truncate_text
from prometheus_client import PrometheusClient
from docker_client import DockerClient
from ai_analyzer import AIAnalyzer
from alerts import AlertsClient
from models import (
    AppConfig, ContainerInfo, HealthCheckResult, AllMetrics, 
    CacheStatistics, AIAnalysisResult, Alert, CommandResult,
    AISystemAnalysis, AITrendAnalysis
)

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ main.py)
prometheus_client: Optional[PrometheusClient] = None
docker_client: Optional[DockerClient] = None
ai_analyzer: Optional[AIAnalyzer] = None
alerts_client: Optional[AlertsClient] = None
config: Optional[AppConfig] = None

def init_clients(app_config: AppConfig) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    global prometheus_client, docker_client, ai_analyzer, alerts_client, config
    config = app_config
    prometheus_client = PrometheusClient(config)
    docker_client = DockerClient(config)
    ai_analyzer = AIAnalyzer(config)
    alerts_client = AlertsClient(config)

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø
ALLOWED_USERS: set[int] = set()
ALLOWED_GROUPS: set[int] = set()

def load_allowed_users() -> bool:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø"""
    global ALLOWED_USERS, ALLOWED_GROUPS
    
    if not config:
        logger.error("Config not initialized")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    allowed_users = config.telegram.allowed_users
    allowed_groups = config.telegram.allowed_groups
    
    ALLOWED_USERS = set(allowed_users) if allowed_users else set()
    ALLOWED_GROUPS = set(allowed_groups) if allowed_groups else set()
    
    # –ï—Å–ª–∏ —Å–ø–∏—Å–∫–∏ –ø—É—Å—Ç—ã–µ, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    if not ALLOWED_USERS and not ALLOWED_GROUPS:
        logger.warning("No access restrictions configured - allowing all users")
        return True
    
    return False

def is_authorized(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type

    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
    if not ALLOWED_USERS and not ALLOWED_GROUPS:
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in ALLOWED_USERS:
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É
    if chat_type in ['group', 'supergroup'] and chat_id in ALLOWED_GROUPS:
        return True

    return False

def check_clients_initialized() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    return all([prometheus_client, docker_client, ai_analyzer, alerts_client, config])

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    welcome_text = """
üöÄ *Bitrix CDN Monitor Bot*

–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–∞—à–µ–π CDN —Å–∏—Å—Ç–µ–º—ã.

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/status - –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/nginx - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Nginx
/redis - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis
/webp - –°—Ç–∞—Ç—É—Å WebP –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
/containers - –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
/health - Health checks
/cache - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è

*–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/quick - –ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã
/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
/summary - –°–≤–æ–¥–∫–∞ –∑–∞ —á–∞—Å
/tips - –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

*AI-–∞–Ω–∞–ª–∏–∑:*
/analyze - AI-–∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã
/ask [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É
/code - –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
/debug - –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
/suggest - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

*–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤:*
/trends - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
/compare - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
/forecast - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏

*–û—Ç—á–µ—Ç—ã:*
/report - –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ
/alerts - –¢–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã

*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
/subscribe - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

*–ü–æ–º–æ—â—å:*
/help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥

–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üéØü§ñ
    """
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    help_text = """
üìã *–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*

*–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:*
/status - –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
/nginx - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Nginx
/redis - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis
/webp - –°—Ç–∞—Ç—É—Å WebP –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
/prometheus - –ú–µ—Ç—Ä–∏–∫–∏ Prometheus
/containers - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
/health - Health checks –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
/cache - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
/ssl - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö

*–õ–æ–≥–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏:*
/logs [service] - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞
/metrics [service] - –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞

*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*
/restart [service] - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞

        *–ê–Ω–∞–ª–∏–∑:*
/analyze - AI-–∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
/report - –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ
/alerts - –¢–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã

        *–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/quick - –ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã
/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
/summary - –°–≤–æ–¥–∫–∞ –∑–∞ —á–∞—Å
/tips - –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
/shortcuts - –°–ø–∏—Å–æ–∫ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥

*–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/ask [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É –æ —Å–∏—Å—Ç–µ–º–µ
/code - –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
/debug - –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/suggest - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

*–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤:*
/trends - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
/compare - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
/forecast - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
/subscribe - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

*–ü–æ–º–æ—â—å:*
/help - –≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    """
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status - –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    status_text = """
üìä *–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ CDN*

üê≥ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:*
‚Ä¢ Nginx: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ Redis: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç  
‚Ä¢ WebP: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ Prometheus: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ Grafana: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ AlertManager: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

‚ö° *–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*
‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã/–º–∏–Ω: 1,234
‚Ä¢ –ö–µ—à-—Ö–∏—Ç—ã: 89%
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: 45ms
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ WebP: 156/–º–∏–Ω

üîí *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*
‚Ä¢ SSL: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ‚úÖ –ó–∞—â–∏—â–µ–Ω–æ

*–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!* ‚úÖ
    """
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def nginx_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /nginx - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Nginx"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    nginx_text = """
üåê *NGINX –°–¢–ê–¢–£–°*

‚úÖ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç
üìä –ó–∞–ø—Ä–æ—Å—ã/–º–∏–Ω: 1,234
‚ö° –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: 45ms
üîí SSL: –ê–∫—Ç–∏–≤–µ–Ω
üìà –ö–µ—à-—Ö–∏—Ç—ã: 89%

*Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!*
    """
    await update.message.reply_text(nginx_text, parse_mode='Markdown')

async def redis_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /redis - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if not check_clients_initialized():
        await update.message.reply_text("‚ùå –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å Redis
        redis_status = await docker_client.get_container_status('cdn-redis')
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ Redis
        redis_metrics = await prometheus_client.get_redis_metrics()
        
        text = "üíæ *Redis Status*\n\n"
        text += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if redis_status['running'] else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        
        if redis_status.get('health'):
            health_emoji = "üü¢" if redis_status['health'] == 'healthy' else "üü°"
            text += f"Health: {health_emoji} {redis_status['health']}\n"
        
        if redis_metrics:
            text += "\nüìä *–ú–µ—Ç—Ä–∏–∫–∏:*\n"
            for metric, value in redis_metrics.items():
                if value:
                    text += f"‚Ä¢ {metric}: {value}\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã redis: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Redis: {e}")

async def webp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /webp - —Å—Ç–∞—Ç—É—Å WebP –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å WebP –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
        webp_status = await docker_client.get_container_status('cdn-webp-converter-async')
        
        text = "üñºÔ∏è *WebP Converter Status*\n\n"
        text += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if webp_status['running'] else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        
        if webp_status.get('health'):
            health_emoji = "üü¢" if webp_status['health'] == 'healthy' else "üü°"
            text += f"Health: {health_emoji} {webp_status['health']}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ WebP –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
        try:
            webp_metrics = await prometheus_client.get_webp_metrics()
            if webp_metrics:
                text += "\nüìä *–ú–µ—Ç—Ä–∏–∫–∏:*\n"
                for metric, value in webp_metrics.items():
                    if value:
                        text += f"‚Ä¢ {metric}: {value}\n"
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ WebP: {e}")
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã webp: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ WebP –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–µ: {e}")

async def containers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /containers - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        containers = await docker_client.get_containers_status()
        
        text = "üê≥ *Docker –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã*\n\n"
        
        for container in containers:
            status_emoji = "‚úÖ" if container['status'] == 'running' else "‚ùå"
            text += f"{status_emoji} *{container['name']}*\n"
            text += f"   –°—Ç–∞—Ç—É—Å: {container['status']}\n"
            if container.get('health'):
                health_emoji = "üü¢" if container['health'] == 'healthy' else "üü°"
                text += f"   Health: {health_emoji} {container['health']}\n"
            text += "\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã containers: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")

async def health_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /health - health checks –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoints
        health_checks = await docker_client.get_health_checks()
        
        text = "üè• *Health Checks*\n\n"
        
        for service, status in health_checks.items():
            status_emoji = "‚úÖ" if status['healthy'] else "‚ùå"
            text += f"{status_emoji} *{service}*\n"
            text += f"   –°—Ç–∞—Ç—É—Å: {status['status']}\n"
            if status.get('response_time'):
                text += f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {status['response_time']}ms\n"
            text += "\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã health: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è health checks: {e}")

async def cache_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cache - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
        cache_stats = await docker_client.get_cache_statistics()
        
        text = "üíæ *Cache Statistics*\n\n"
        
        if cache_stats.get('redis'):
            redis_stats = cache_stats['redis']
            text += "üî¥ *Redis:*\n"
            text += f"   –ü–∞–º—è—Ç—å: {redis_stats.get('memory', 'N/A')}\n"
            text += f"   –ö–ª—é—á–∏: {redis_stats.get('keys', 'N/A')}\n"
            text += f"   Hit Rate: {redis_stats.get('hit_rate', 'N/A')}\n\n"
        
        if cache_stats.get('nginx'):
            nginx_stats = cache_stats['nginx']
            text += "üåê *Nginx:*\n"
            text += f"   Cache Size: {nginx_stats.get('cache_size', 'N/A')}\n"
            text += f"   Files: {nginx_stats.get('files', 'N/A')}\n\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã cache: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞: {e}")

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /analyze - AI-–∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    if not ai_analyzer:
        await update.message.reply_text("‚ùå AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return
    
    try:
        await update.message.reply_text("ü§ñ –í—ã–ø–æ–ª–Ω—è—é AI-–∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑
        analysis: AISystemAnalysis = await ai_analyzer.analyze_system()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ Pydantic –º–æ–¥–µ–ª–∏
        response_text = _format_modern_analysis_result(analysis)
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        response_text = truncate_text(response_text, 4000)
        
        await update.message.reply_text(f"üß† *AI –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã:*\n\n{response_text}", parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã analyze: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: {e}")

def _format_modern_analysis_result(analysis: AISystemAnalysis) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ AI-–∞–Ω–∞–ª–∏–∑–∞ –∏–∑ Pydantic –º–æ–¥–µ–ª–∏"""
    status_emoji = "‚úÖ" if analysis.status == "healthy" else "‚ö†Ô∏è" if analysis.status == "warning" else "üö®"
    
    text = f"{status_emoji} *–°—Ç–∞—Ç—É—Å:* {analysis.status.upper()}\n"
    text += f"üìä *–û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:* {analysis.overall_health_score}/100\n\n"
    
    if analysis.problems:
        text += "‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º—ã:*\n"
        for problem in analysis.problems:
            text += f"‚Ä¢ {problem}\n"
        text += "\n"
    
    if analysis.recommendations:
        text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        for recommendation in analysis.recommendations:
            text += f"‚Ä¢ {recommendation}\n"
        text += "\n"
    
    if analysis.forecast:
        text += f"üîÆ *–ü—Ä–æ–≥–Ω–æ–∑:* {analysis.forecast}\n"
    
    return text

def _format_analysis_result(analysis: AIAnalysisResult) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ AI-–∞–Ω–∞–ª–∏–∑–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    text = f"üìä *–°—Ç–∞—Ç—É—Å:* {analysis.status}\n\n"
    
    if analysis.problems:
        text += "‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º—ã:*\n"
        for problem in analysis.problems:
            text += f"‚Ä¢ {problem}\n"
        text += "\n"
    
    if analysis.recommendations:
        text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        for recommendation in analysis.recommendations:
            text += f"‚Ä¢ {recommendation}\n"
        text += "\n"
    
    if analysis.performance_score:
        text += f"üìà *–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:* {analysis.performance_score}/100\n\n"
    
    if analysis.forecast:
        text += f"üîÆ *–ü—Ä–æ–≥–Ω–æ–∑:* {analysis.forecast}\n"
    
    return text

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /report - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        containers = await docker_client.get_containers_status()
        health_checks = await docker_client.get_health_checks()
        cache_stats = await docker_client.get_cache_statistics()
        
        text = "üìã *–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ CDN*\n\n"
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        text += "üê≥ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:*\n"
        for container in containers:
            status_emoji = "‚úÖ" if container['status'] == 'running' else "‚ùå"
            text += f"{status_emoji} {container['name']}: {container['status']}\n"
        
        text += "\nüè• *Health Checks:*\n"
        for service, status in health_checks.items():
            status_emoji = "‚úÖ" if status['healthy'] else "‚ùå"
            text += f"{status_emoji} {service}: {status['status']}\n"
        
        text += "\nüíæ *Cache Statistics:*\n"
        if cache_stats.get('redis'):
            redis_stats = cache_stats['redis']
            text += f"Redis –ø–∞–º—è—Ç—å: {redis_stats.get('memory', 'N/A')}\n"
            text += f"Redis –∫–ª—é—á–∏: {redis_stats.get('keys', 'N/A')}\n"
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        text = truncate_text(text, 4000)
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã report: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

async def alerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /alerts - —Ç–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        alerts = await alerts_client.get_active_alerts()
        
        if not alerts:
            await update.message.reply_text("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç")
            return
        
        text = "üö® *–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:*\n\n"
        
        for alert in alerts:
            severity_emoji = "üî¥" if alert.get('severity') == 'critical' else "üü°"
            text += f"{severity_emoji} *{alert.get('name', 'Unknown')}*\n"
            text += f"   –°—Ç–∞—Ç—É—Å: {alert.get('status', 'Unknown')}\n"
            text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {alert.get('description', 'No description')}\n\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã alerts: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /subscribe - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await update.message.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")

async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /unsubscribe - –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø–∏—Å–∫—É –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await update.message.reply_text("‚úÖ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

# –£–¥–æ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
async def quick_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /quick - –±—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        # –ë—ã—Å—Ç—Ä—ã–π —Å–±–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        containers = await docker_client.get_containers_status()
        health_checks = await docker_client.get_health_checks()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        running_count = sum(1 for c in containers if c['status'] == 'running')
        total_count = len(containers)
        healthy_count = sum(1 for status in health_checks.values() if status['healthy'])
        total_health = len(health_checks)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        text = "‚ö° *–ë–´–°–¢–†–´–ô –û–ë–ó–û–† –°–ò–°–¢–ï–ú–´*\n\n"
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        text += f"üê≥ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:* {running_count}/{total_count} —Ä–∞–±–æ—Ç–∞—é—Ç\n"
        if running_count < total_count:
            stopped = [c['name'] for c in containers if c['status'] != 'running']
            text += f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(stopped)}\n"
        
        # Health checks
        text += f"üè• *Health Checks:* {healthy_count}/{total_health} OK\n"
        if healthy_count < total_health:
            unhealthy = [name for name, status in health_checks.items() if not status['healthy']]
            text += f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(unhealthy)}\n"
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if running_count == total_count and healthy_count == total_health:
            text += "\n‚úÖ *–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!*"
        else:
            text += f"\n‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã quick: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–∑–æ—Ä–∞: {e}")

async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    start_time = asyncio.get_event_loop().time()
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    try:
        nginx_status = await docker_client.get_container_status('cdn-nginx')
        redis_status = await docker_client.get_container_status('cdn-redis')
        
        end_time = asyncio.get_event_loop().time()
        response_time = int((end_time - start_time) * 1000)
        
        text = f"üèì *PONG!*\n\n"
        text += f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time}ms\n"
        text += f"üåê Nginx: {'‚úÖ' if nginx_status['running'] else '‚ùå'}\n"
        text += f"üíæ Redis: {'‚úÖ' if redis_status['running'] else '‚ùå'}\n"
        text += f"ü§ñ –ë–æ—Ç: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n"
        
        if response_time < 1000:
            text += "\nüöÄ *–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!*"
        elif response_time < 3000:
            text += "\n‚ö° *–•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å*"
        else:
            text += "\nüêå *–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç*"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã ping: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ ping: {e}")

async def summary_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /summary - –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        await update.message.reply_text("üìä –°–æ–±–∏—Ä–∞—é —Å–≤–æ–¥–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        containers = await docker_client.get_containers_status()
        health_checks = await docker_client.get_health_checks()
        metrics = await prometheus_client.get_all_metrics()
        
        text = "üìà *–°–í–û–î–ö–ê –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°*\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        running = [c for c in containers if c['status'] == 'running']
        stopped = [c for c in containers if c['status'] != 'running']
        
        text += f"üê≥ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:* {len(running)}/{len(containers)} —Ä–∞–±–æ—Ç–∞—é—Ç\n"
        if stopped:
            text += f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {', '.join([c['name'] for c in stopped])}\n"
        
        # Health checks
        healthy = [name for name, status in health_checks.items() if status['healthy']]
        unhealthy = [name for name, status in health_checks.items() if not status['healthy']]
        
        text += f"üè• *Health Checks:* {len(healthy)}/{len(health_checks)} OK\n"
        if unhealthy:
            text += f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(unhealthy)}\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if metrics.get('nginx'):
            nginx_metrics = metrics['nginx']
            if nginx_metrics.get('requests_per_min'):
                text += f"\nüåê *Nginx:* {nginx_metrics['requests_per_min']} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω\n"
        
        if metrics.get('redis'):
            redis_metrics = metrics['redis']
            if redis_metrics.get('memory_used'):
                text += f"üíæ *Redis:* {redis_metrics['memory_used']} –ø–∞–º—è—Ç–∏\n"
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        if len(running) == len(containers) and len(healthy) == len(health_checks):
            text += "\n‚úÖ *–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ*"
        else:
            text += "\n‚ö†Ô∏è *–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ*"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã summary: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤–æ–¥–∫–∏: {e}")

async def tips_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /tips - –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
        containers = await docker_client.get_containers_status()
        metrics = await prometheus_client.get_all_metrics()
        
        tips = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Redis
        if metrics.get('redis', {}).get('memory_used'):
            memory_str = metrics['redis']['memory_used']
            if 'GB' in memory_str:
                memory_gb = float(memory_str.replace(' GB', ''))
                if memory_gb > 1.0:
                    tips.append("üíæ *Redis:* –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∏–ª–∏ –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞.")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Nginx
        if metrics.get('nginx', {}).get('requests_per_min'):
            requests = metrics['nginx']['requests_per_min']
            if isinstance(requests, (int, float)) and requests > 500:
                tips.append("üåê *Nginx:* –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ rate limiting.")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        stopped_containers = [c for c in containers if c['status'] != 'running']
        if stopped_containers:
            tips.append(f"üê≥ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:* –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {', '.join([c['name'] for c in stopped_containers])}. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.")
        
        # –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã
        general_tips = [
            "üîß *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:* –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫",
            "üìä *–õ–æ–≥–∏:* –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏",
            "‚ö° *–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /suggest –¥–ª—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
            "üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∏—è:* –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
        ]
        
        text = "üí° *–ü–û–õ–ï–ó–ù–´–ï –°–û–í–ï–¢–´*\n\n"
        
        if tips:
            text += "üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            for tip in tips:
                text += f"{tip}\n"
            text += "\n"
        
        text += "üìö *–û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:*\n"
        for tip in general_tips:
            text += f"{tip}\n"
        
        text += "\nüí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ask –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã tips: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤–µ—Ç–æ–≤: {e}")

async def shortcuts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /shortcuts - –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–¥–∞—á"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    text = """
‚ö° *–ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´*

*–û—Å–Ω–æ–≤–Ω—ã–µ:*
/quick - –ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã
/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
/summary - –°–≤–æ–¥–∫–∞ –∑–∞ —á–∞—Å
/tips - –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

*–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:*
/debug - –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
/code - –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
/ask [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É

*–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:*
/status - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
/health - Health checks
/containers - –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤

*AI-–∞–Ω–∞–ª–∏–∑:*
/analyze - AI-–∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã
/suggest - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
/report - –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç

*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
/subscribe - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–ª–µ—Ä—Ç—ã
/alerts - –¢–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã

üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quick –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏!
    """
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def trends_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /trends - –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        await update.message.reply_text("üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = await prometheus_client.get_all_metrics()
        
        text = "üìä *–ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í*\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ Nginx
        if metrics.get('nginx'):
            nginx_metrics = metrics['nginx']
            text += "üåê *Nginx —Ç—Ä–µ–Ω–¥—ã:*\n"
            
            if nginx_metrics.get('requests_per_min'):
                requests = nginx_metrics['requests_per_min']
                if isinstance(requests, (int, float)):
                    if requests > 1000:
                        text += f"üìà –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {requests} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω\n"
                        text += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                    elif requests > 500:
                        text += f"üìä –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {requests} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω\n"
                    else:
                        text += f"üìâ –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {requests} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω\n"
            
            if nginx_metrics.get('cache_hit_rate'):
                hit_rate = nginx_metrics['cache_hit_rate']
                text += f"üéØ Cache Hit Rate: {hit_rate}\n"
                if hit_rate and isinstance(hit_rate, (int, float)) and hit_rate < 0.8:
                    text += "‚ö†Ô∏è –ù–∏–∑–∫–∏–π hit rate - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∞\n"
        
        # –ê–Ω–∞–ª–∏–∑ Redis
        if metrics.get('redis'):
            redis_metrics = metrics['redis']
            text += "\nüíæ *Redis —Ç—Ä–µ–Ω–¥—ã:*\n"
            
            if redis_metrics.get('memory_used'):
                memory = redis_metrics['memory_used']
                text += f"üß† –ü–∞–º—è—Ç—å: {memory}\n"
                if 'GB' in memory:
                    memory_gb = float(memory.replace(' GB', ''))
                    if memory_gb > 1.5:
                        text += "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏\n"
                        text += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û—á–∏—Å—Ç–∏—Ç–µ –∫–µ—à –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç—ã\n"
            
            if redis_metrics.get('hit_rate'):
                hit_rate = redis_metrics['hit_rate']
                text += f"üéØ Hit Rate: {hit_rate}\n"
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        text += "\nüí° *–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        text += "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏\n"
        text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /suggest –¥–ª—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
        text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ç—Ä–µ–Ω–¥—ã –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã trends: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")

async def compare_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /compare - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        await update.message.reply_text("üîÑ –°—Ä–∞–≤–Ω–∏–≤–∞—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        current_metrics = await prometheus_client.get_all_metrics()
        containers = await docker_client.get_containers_status()
        
        text = "üìä *–°–†–ê–í–ù–ï–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô*\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        running_count = sum(1 for c in containers if c['status'] == 'running')
        total_count = len(containers)
        
        text += f"üê≥ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:* {running_count}/{total_count} —Ä–∞–±–æ—Ç–∞—é—Ç\n"
        if running_count == total_count:
            text += "‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n"
        else:
            text += "‚ö†Ô∏è –ï—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã\n"
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if current_metrics.get('nginx'):
            nginx_metrics = current_metrics['nginx']
            text += "\nüåê *Nginx –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*\n"
            
            if nginx_metrics.get('requests_per_min'):
                requests = nginx_metrics['requests_per_min']
                text += f"üìà –ó–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω: {requests}\n"
                
                if isinstance(requests, (int, float)):
                    if requests > 1000:
                        text += "üöÄ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π\n"
                    elif requests > 500:
                        text += "‚ö° –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
                    else:
                        text += "üò¥ –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è\n"
        
        # –ê–Ω–∞–ª–∏–∑ Redis
        if current_metrics.get('redis'):
            redis_metrics = current_metrics['redis']
            text += "\nüíæ *Redis —Å–æ—Å—Ç–æ—è–Ω–∏–µ:*\n"
            
            if redis_metrics.get('memory_used'):
                memory = redis_metrics['memory_used']
                text += f"üß† –ü–∞–º—è—Ç—å: {memory}\n"
                
                if 'GB' in memory:
                    memory_gb = float(memory.replace(' GB', ''))
                    if memory_gb > 1.0:
                        text += "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏\n"
                    else:
                        text += "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏\n"
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        text += "\nüéØ *–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:*\n"
        if running_count == total_count:
            text += "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n"
            text += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        else:
            text += "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ\n"
            text += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã compare: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")

async def forecast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /forecast - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        await update.message.reply_text("üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = await prometheus_client.get_all_metrics()
        containers = await docker_client.get_containers_status()
        
        text = "üîÆ *–ü–†–û–ì–ù–û–ó –ù–ê–ì–†–£–ó–ö–ò*\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        if metrics.get('nginx'):
            nginx_metrics = metrics['nginx']
            if nginx_metrics.get('requests_per_min'):
                requests = nginx_metrics['requests_per_min']
                
                text += "üìä *–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:*\n"
                text += f"üåê Nginx: {requests} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω\n"
                
                # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                if isinstance(requests, (int, float)):
                    if requests > 1000:
                        text += "\n‚ö†Ô∏è *–ü—Ä–æ–≥–Ω–æ–∑:* –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è\n"
                        text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
                        text += "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–µ—Å—É—Ä—Å—ã Nginx\n"
                        text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                        text += "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                    elif requests > 500:
                        text += "\nüìà *–ü—Ä–æ–≥–Ω–æ–∑:* –ù–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è\n"
                        text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
                        text += "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏\n"
                        text += "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                    else:
                        text += "\nüò¥ *–ü—Ä–æ–≥–Ω–æ–∑:* –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞, —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–æ—Å—Ç—É\n"
                        text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
                        text += "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –Ω–∞–≥—Ä—É–∑–∫–∏\n"
                        text += "‚Ä¢ –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã\n"
        
        # –ê–Ω–∞–ª–∏–∑ Redis
        if metrics.get('redis'):
            redis_metrics = metrics['redis']
            if redis_metrics.get('memory_used'):
                memory = redis_metrics['memory_used']
                text += f"\nüíæ *Redis –ø–∞–º—è—Ç—å:* {memory}\n"
                
                if 'GB' in memory:
                    memory_gb = float(memory.replace(' GB', ''))
                    if memory_gb > 1.0:
                        text += "‚ö†Ô∏è *–ü—Ä–æ–≥–Ω–æ–∑:* –ü–∞–º—è—Ç—å Redis –º–æ–∂–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–∏—Ç—å—Å—è\n"
                        text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
                        text += "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç—ã –ø–∞–º—è—Ç–∏\n"
                        text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É\n"
                        text += "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é Redis\n"
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        text += "\nüéØ *–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        text += "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ç—Ä–µ–Ω–¥—ã\n"
        text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /suggest –¥–ª—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
        text += "‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã forecast: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    text = """
‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê*

*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞: –ö–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑: –í–∫–ª—é—á–µ–Ω
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/subscribe - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/shortcuts - –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
/tips - –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

*–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ config.yml
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤

üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quick –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏!
    """
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def help_advanced_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help_advanced - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    text = """
üìö *–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–ü–†–ê–í–ö–ê*

*–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/quick - –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã
/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ (–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞)
/summary - –°–≤–æ–¥–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
/tips - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
/shortcuts - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥

*–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:*
/debug - –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å –ø–æ–∏—Å–∫–æ–º –ø—Ä–æ–±–ª–µ–º
/code - –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ –ª–æ–≥–æ–≤
/ask [–≤–æ–ø—Ä–æ—Å] - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
/suggest - AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

*–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤:*
/trends - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
/compare - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
/forecast - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

*–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:*
/status - –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
/health - Health checks –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
/containers - –°–ø–∏—Å–æ–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
/nginx - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Nginx
/redis - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis
/webp - –°—Ç–∞—Ç—É—Å WebP –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞

*AI-–∞–Ω–∞–ª–∏–∑:*
/analyze - –ü–æ–ª–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã
/report - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
/alerts - –¢–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã

*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
/subscribe - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–ª–µ—Ä—Ç—ã
/unsubscribe - –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
‚Ä¢ `/ask "–ü–æ—á–µ–º—É –º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–π—Ç?"`
‚Ä¢ `/quick` - –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ `/debug` - –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º
‚Ä¢ `/suggest` - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

üí° *–°–æ–≤–µ—Ç:* –ù–∞—á–Ω–∏—Ç–µ —Å /quick, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã!
    """
    
    await update.message.reply_text(text, parse_mode='Markdown')

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
async def ask_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /ask - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    question = " ".join(context.args) if context.args else "–ö–∞–∫ –¥–µ–ª–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π?"
    
    try:
        await update.message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–µ
        system_data = await gather_system_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        context_text = f"""
–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}

–î–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:
{system_data}
"""
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response = await ai_analyzer.ask_question(context_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(f"üß† *AI –ê–Ω–∞–ª–∏–∑:*\n\n{response}", parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã ask: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

async def code_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /code - –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–¥ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö
        configs_info = await analyze_configurations()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å AI
        analysis = await ai_analyzer.analyze_code(configs_info)
        
        await update.message.reply_text(f"üíª *–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:*\n\n{analysis}", parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã code: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞: {e}")

async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /debug - –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        await update.message.reply_text("üîß –í—ã–ø–æ–ª–Ω—è—é –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        debug_info = await gather_debug_info()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        issues = await ai_analyzer.find_issues(debug_info)
        
        if issues:
            await update.message.reply_text(f"‚ö†Ô∏è *–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:*\n\n{issues}", parse_mode='Markdown')
        else:
            await update.message.reply_text("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã debug: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

async def suggest_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /suggest - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    if not is_authorized(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        await update.message.reply_text("üí° –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await gather_system_data()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç AI
        suggestions = await ai_analyzer.get_suggestions(current_state)
        
        await update.message.reply_text(f"üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n\n{suggestions}", parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã suggest: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def gather_system_data() -> str:
    """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        containers = await docker_client.get_containers_status()
        health_checks = await docker_client.get_health_checks()
        metrics = await prometheus_client.get_all_metrics()
        
        data = "=== –°–ò–°–¢–ï–ú–ù–´–ï –î–ê–ù–ù–´–ï ===\n\n"
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        data += "üê≥ –ö–û–ù–¢–ï–ô–ù–ï–†–´:\n"
        for container in containers:
            status_emoji = "‚úÖ" if container['status'] == 'running' else "‚ùå"
            data += f"{status_emoji} {container['name']}: {container['status']}\n"
        
        # Health checks
        data += "\nüè• HEALTH CHECKS:\n"
        for service, status in health_checks.items():
            status_emoji = "‚úÖ" if status['healthy'] else "‚ùå"
            data += f"{status_emoji} {service}: {status['status']}\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        if metrics:
            data += "\nüìä –ú–ï–¢–†–ò–ö–ò:\n"
            for service, service_metrics in metrics.items():
                if service_metrics:
                    data += f"{service.upper()}:\n"
                    for metric, value in service_metrics.items():
                        if value and value != 'N/A':
                            data += f"  {metric}: {value}\n"
        
        return data
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}"

async def analyze_configurations() -> str:
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö
        configs = []
        
        # Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        try:
            nginx_config = await docker_client.get_container_logs('cdn-nginx', 50)
            configs.append(f"NGINX LOGS:\n{nginx_config[:1000]}...")
        except:
            configs.append("NGINX: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏")
        
        # Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        try:
            redis_info = await docker_client.get_container_logs('cdn-redis', 20)
            configs.append(f"REDIS LOGS:\n{redis_info[:500]}...")
        except:
            configs.append("REDIS: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏")
        
        return "\n\n".join(configs)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}"

async def gather_debug_info() -> str:
    """–°–±–æ—Ä –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        debug_info = []
        
        # –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        containers = await docker_client.get_containers_status()
        debug_info.append("=== –ö–û–ù–¢–ï–ô–ù–ï–†–´ ===")
        for container in containers:
            debug_info.append(f"{container['name']}: {container['status']} (health: {container.get('health', 'N/A')})")
        
        # Health checks
        health_checks = await docker_client.get_health_checks()
        debug_info.append("\n=== HEALTH CHECKS ===")
        for service, status in health_checks.items():
            debug_info.append(f"{service}: {status['status']} (healthy: {status['healthy']})")
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        try:
            metrics = await prometheus_client.get_all_metrics()
            debug_info.append("\n=== –ú–ï–¢–†–ò–ö–ò ===")
            for service, service_metrics in metrics.items():
                if service_metrics:
                    debug_info.append(f"{service.upper()}:")
                    for metric, value in service_metrics.items():
                        if value and value != 'N/A':
                            debug_info.append(f"  {metric}: {value}")
        except Exception as e:
            debug_info.append(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        
        return "\n".join(debug_info)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∑–∞–≥–ª—É—à–∫–∏)
async def prometheus_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Prometheus... (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

async def ssl_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö... (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

async def logs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤... (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

async def metrics_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìà –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤... (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

async def restart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤... (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
