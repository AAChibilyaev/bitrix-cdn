# Bitrix CDN Server Configuration - MAXIMUM PERFORMANCE
# Author: Chibilyaev Alexandr <info@aachibilyaev.com>
# Company: AAChibilyaev LTD

# Smart WebP support detection
map $http_accept $webp_suffix {
    default "";
    "~*image/webp" ".webp";
}

# Smart AVIF support detection
map $http_accept $avif_suffix {
    default "";
    "~*image/avif" ".avif";
}

# Map for WebP file existence check
map $uri $webp_uri {
    default "";
    "~^(.*)\.(jpg|jpeg|png|gif|bmp)$" "$1.$2.webp";
}

# Map for AVIF file existence check
map $uri $avif_uri {
    default "";
    "~^(.*)\.(jpg|jpeg|png|gif|bmp)$" "$1.$2.avif";
}

# Map for content type based on file extension
map $uri $image_content_type {
    default "image/jpeg";
    "~*\.jpg$" "image/jpeg";
    "~*\.jpeg$" "image/jpeg";
    "~*\.png$" "image/png";
    "~*\.gif$" "image/gif";
    "~*\.bmp$" "image/bmp";
    "~*\.webp$" "image/webp";
    "~*\.avif$" "image/avif";
}

# Cache key for proxy cache
map $request_uri $cache_key {
    default $request_uri;
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name cdn.termokit.ru www.cdn.termokit.ru;
    
    # Health check endpoint
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "OK\n";
    }
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://cdn.termokit.ru$request_uri;
    }
}

# Main HTTPS server - MAXIMUM PERFORMANCE
server {
    listen 443 ssl http2;
    server_name cdn.termokit.ru;

    # SSL Configuration - Modern and Fast
    ssl_certificate /etc/nginx/ssl/cdn.termokit.ru/certificate.pem;
    ssl_certificate_key /etc/nginx/ssl/cdn.termokit.ru/certificate.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # Root directory
    root /var/www/cdn;
    
    # Logging
    access_log /var/log/nginx/cdn.access.log main;
    error_log /var/log/nginx/cdn.error.log warn;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-CDN "Bitrix CDN Server" always;
    
    # MAXIMUM CACHE SETTINGS - ALL IN RAM
    open_file_cache max=100000 inactive=300s;
    open_file_cache_valid 300s;
    open_file_cache_min_uses 1;
    open_file_cache_errors on;
    
    # Connection limits
    limit_conn conn_limit_per_ip 20;
    limit_conn conn_limit_per_server 1000;
    
    # Health check endpoint
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "OK\n";
    }

    # Status page for monitoring
    location /nginx_status {
        stub_status;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }

    # Handle resize_cache images - MAXIMUM PERFORMANCE with Redis + Memcached
    location ~ ^/upload/resize_cache/.*\.(jpg|jpeg|png|gif|bmp)$ {
        # Rate limiting
        limit_req zone=images burst=500 nodelay;

        # Redis + Memcached cache integration
        access_by_lua_block {
            local redis_cache = require "redis-cache"
            local memcached_cache = require "memcached-cache"
            
            if redis_cache.should_cache() then
                local key = redis_cache.generate_cache_key()
                local cache_data = redis_cache.get_from_cache(key)
                
                if cache_data then
                    redis_cache.handle_cache_hit(cache_data)
                else
                    -- Try Memcached as fallback
                    local memcached_data = memcached_cache.get_from_cache(key)
                    if memcached_data then
                        memcached_cache.handle_cache_hit(memcached_data)
                    else
                        redis_cache.handle_cache_miss()
                    end
                end
            end
        }
        
        # PROXY CACHE - ALL IN RAM
        proxy_cache ram_cache;
        proxy_cache_valid 200 1y;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        proxy_cache_key $scheme$proxy_host$request_uri;
        
        # Cache headers
        add_header X-Cache-Status $upstream_cache_status;
        add_header Cache-Control "public, immutable, max-age=31536000";
        add_header Vary "Accept";
        add_header Last-Modified $date_gmt;
        add_header ETag off;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
        add_header Access-Control-Max-Age 31536000;

        # SMART AVIF/WebP serving logic
        # Try AVIF first if browser supports it, then WebP, then original
        try_files $uri$avif_suffix $uri$webp_suffix $uri =404;
        
        # Set correct content type
        add_header Content-Type $image_content_type;
        
        # Set cache after response
        header_filter_by_lua_block {
            local redis_cache = require "redis-cache"
            local memcached_cache = require "memcached-cache"
            
            if redis_cache.should_cache() and ngx.var.upstream_cache_status == "MISS" then
                local content = ngx.arg[1]
                local content_type = ngx.var.image_content_type or "image/jpeg"
                local cache_control = "public, immutable, max-age=31536000"
                local ttl = 31536000 -- 1 year
                
                -- Set to both Redis and Memcached
                redis_cache.handle_cache_set(content, content_type, cache_control, ttl)
                memcached_cache.handle_cache_set(content, content_type, cache_control, ttl)
            end
        }
    }

    # Handle WebP files with MAXIMUM PERFORMANCE
    location ~ ^/upload/resize_cache/.*\.webp$ {
        # Rate limiting
        limit_req zone=images burst=500 nodelay;

        # PROXY CACHE - ALL IN RAM
        proxy_cache ram_cache;
        proxy_cache_valid 200 1y;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        proxy_cache_key $scheme$proxy_host$request_uri;
        
        # Cache headers
        add_header X-Cache-Status $upstream_cache_status;
        add_header Cache-Control "public, immutable, max-age=31536000";
        add_header Content-Type "image/webp";
        add_header Vary "Accept";
        add_header Last-Modified $date_gmt;
        add_header ETag off;

        # CORS headers
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
        add_header Access-Control-Max-Age 31536000;

        try_files $uri =404;
    }

    # Handle AVIF files with MAXIMUM PERFORMANCE
    location ~ ^/upload/resize_cache/.*\.avif$ {
        # Rate limiting
        limit_req zone=images burst=500 nodelay;

        # PROXY CACHE - ALL IN RAM
        proxy_cache ram_cache;
        proxy_cache_valid 200 1y;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        proxy_cache_key $scheme$proxy_host$request_uri;
        
        # Cache headers
        add_header X-Cache-Status $upstream_cache_status;
        add_header Cache-Control "public, immutable, max-age=31536000";
        add_header Content-Type "image/avif";
        add_header Vary "Accept";
        add_header Last-Modified $date_gmt;
        add_header ETag off;

        # CORS headers
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
        add_header Access-Control-Max-Age 31536000;

        try_files $uri =404;
    }

    # Original images from Bitrix - MAXIMUM PERFORMANCE
    location ~* ^/upload/(?!resize_cache).*\.(jpg|jpeg|png|gif|bmp)$ {
        # Rate limiting
        limit_req zone=images burst=500 nodelay;

        # PROXY CACHE - ALL IN RAM
        proxy_cache ram_cache;
        proxy_cache_valid 200 1y;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        proxy_cache_key $scheme$proxy_host$request_uri;
        
        # Cache headers
        add_header X-Cache-Status $upstream_cache_status;
        add_header Cache-Control "public, immutable, max-age=31536000";
        add_header Vary "Accept";
        add_header Last-Modified $date_gmt;
        add_header ETag off;

        # CORS headers
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
        add_header Access-Control-Max-Age 31536000;

        try_files $uri =404;
    }
    
    # Static files - MAXIMUM PERFORMANCE
    location ~* \.(css|js|html|xml|txt|ico|svg|woff|woff2|ttf|eot)$ {
        # PROXY CACHE - ALL IN RAM
        proxy_cache ram_cache;
        proxy_cache_valid 200 1y;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        proxy_cache_key $scheme$proxy_host$request_uri;
        
        # Cache headers
        add_header X-Cache-Status $upstream_cache_status;
        add_header Cache-Control "public, immutable, max-age=31536000";
        add_header Vary "Accept-Encoding";
        add_header Last-Modified $date_gmt;
        add_header ETag off;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
        add_header Access-Control-Max-Age 31536000;
        
        # Enable gzip compression
        gzip on;
        gzip_vary on;
        gzip_types text/css text/javascript application/javascript text/xml text/plain application/xml application/xml+rss text/xml;
        
        try_files $uri =404;
    }

    # Index page - CDN info
    location = / {
        root /usr/share/nginx/html;
        try_files /index.html =404;
        add_header Cache-Control "no-cache";
    }

    # Default location for files
    location / {
        autoindex off;
        try_files $uri $uri/ =404;
    }
}